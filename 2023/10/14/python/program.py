"""
https://leetcode.com/problems/palindrome-partitioning/
Author: Andrew Jarombek
Date: 10/14/2023
"""


class Solution:
    @staticmethod
    def partition(s: str) -> list[list[str]]:
        # Generate all permutations of the string s where each permutation is a palindrome.
        # For example, if s = 'aab', then the permutations are ['aa', 'b'] and ['a', 'a', 'b'].
        # The permutations are generated by a depth-first search.
        def dfs(s: str, path: list[str]) -> None:
            if len(s) == 0:
                result.append(path)
                return

            for i in range(1, len(s) + 1):
                if Solution.is_palindrome(s[:i]):
                    dfs(s[i:], path + [s[:i]])

        result = []
        dfs(s, [])

        return result

    @staticmethod
    def is_palindrome(s: str) -> bool:
        return s == s[::-1]
